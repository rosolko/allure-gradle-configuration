plugins {
    id "java-library"
    id "io.qameta.allure" version "2.11.2"
    id "com.github.ben-manes.versions" version "0.51.0"
}

group "com.github.rosolko"
version "1.0.0"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

allure {
    version = "2.25.0"
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.21.1"

    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("io.qameta.allure:allure-okhttp3:2.25.0")

    testImplementation("com.codeborne:selenide:7.1.0")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testImplementation("io.qameta.allure:allure-selenide:2.25.0")
    testImplementation("io.undertow:undertow-core:2.3.12.Final")

    testRuntimeOnly("io.qameta.allure:allure-junit5:2.25.0")
    testRuntimeOnly("org.slf4j:slf4j-simple:2.0.12")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

wrapper {
    gradleVersion = "8.5"
}
